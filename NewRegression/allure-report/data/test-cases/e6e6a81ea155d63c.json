{"uid":"e6e6a81ea155d63c","name":"test_tambah_bank","fullName":"TrySeleniumTestCase.NewRegression.test_regression#test_tambah_bank","historyId":"3f88391252a2d797aa42f3dc6b4b52a3","time":{"start":1738568673976,"stop":1738568719254,"duration":45278},"status":"broken","statusMessage":"selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=132.0.6834.160)\nStacktrace:\n\tGetHandleVerifier [0x00A274A3+25091]\n\t(No symbol) [0x009ADC04]\n\t(No symbol) [0x0088B373]\n\t(No symbol) [0x0086CEDB]\n\t(No symbol) [0x008F7FAF]\n\t(No symbol) [0x0090ADC9]\n\t(No symbol) [0x008F1CA6]\n\t(No symbol) [0x008C31D5]\n\t(No symbol) [0x008C435D]\n\tGetHandleVerifier [0x00D207C3+3142947]\n\tGetHandleVerifier [0x00D31A2B+3213195]\n\tGetHandleVerifier [0x00D2C412+3191154]\n\tGetHandleVerifier [0x00AC8720+685184]\n\t(No symbol) [0x009B6E1D]\n\t(No symbol) [0x009B3E18]\n\t(No symbol) [0x009B3FB6]\n\t(No symbol) [0x009A66F0]\n\tBaseThreadInitThunk [0x75987BA9+25]\n\tRtlInitializeExceptionChain [0x7761C0CB+107]\n\tRtlClearBits [0x7761C04F+191]","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"db26184910788f6c2ba9c9428291011d\")>, request = <FixtureRequest for <Function test_tambah_bank>>\n\n    @pytest.mark.order(1)\n    def test_tambah_bank(driver, request):\n        for attempt in range(1):\n            try:\n                print(f\"Iteration {attempt + 1} started\")\n    \n                driver.get(\"https://sit.siprusedu.com/login\")\n                capture_screenshot(driver, request, \"01_login_page\", attempt + 1)\n    \n                wait = WebDriverWait(driver, 10)\n    \n                # Login\n                email = wait.until(\n                    EC.presence_of_element_located((By.XPATH, \"//input[@name='email']\"))\n                )\n                password = driver.find_element(By.NAME, \"password\")\n                login_button = driver.find_element(\n                    By.XPATH, \"//*[@id='__next']/div[1]/main/div[1]/div/form/button\"\n                )\n    \n                email.send_keys(\"admin.sekolah@gmail.com\")\n                password.send_keys(\"Test1234\")\n                capture_screenshot(driver, request, \"02_filled_login_form\", attempt + 1)\n                login_button.click()\n                time.sleep(9)\n                capture_screenshot(driver, request, \"03_after_login\", attempt + 1)\n    \n                # Navigasi ke Master Data\n                master_data = wait.until(\n                    EC.element_to_be_clickable(\n                        (By.XPATH, \"(//*[@data-testid='sidebar-menu-master-data'])[2]\")\n                    )\n                )\n                master_data.click()\n                time.sleep(6)\n                capture_screenshot(driver, request, \"04_master_data_page\", attempt + 1)\n    \n                # Navigasi ke Akun Bank\n                akun_bank = driver.find_element(\n                    By.XPATH, \"(//*[@data-testid='sidebar-menu-akun-bank'])[2]\"\n                )\n                akun_bank.click()\n                time.sleep(6)\n                capture_screenshot(driver, request, \"05_akun_bank_page\", attempt + 1)\n    \n                # Klik Tambah Akun Bank\n                btn_tambah = driver.find_element(\n                    By.XPATH, \"//*[@data-testid='btn-add-bank']\"\n                )\n                btn_tambah.click()\n                time.sleep(6)\n                capture_screenshot(driver, request, \"06_tambah_akun_bank_page\", attempt + 1)\n    \n                # Pilih Nama Bank\n                dropdown_bank = driver.find_element(\n                    By.XPATH, \"//*[@data-testid='selected-value']\"\n                )\n                dropdown_bank.click()\n                value_bank = driver.find_element(\n                    By.XPATH,\n                    \"//*[@data-testid='option-PT. BANK CIMB NIAGA UNIT USAHA SYARIAH - (CIMB SYARIAH)']\",\n                )\n                value_bank.click()\n                time.sleep(3)\n                capture_screenshot(driver, request, \"07_selected_bank\", attempt + 1)\n    \n                # Input Nama Rekening\n                nasabah = driver.find_element(\n                    By.XPATH, \"//*[@data-testid='field-bank-name']\"\n                )\n                nasabah.click()\n                nasabah_list = [\n                    \"Toni\",\n                    \"Jono\",\n                    \"Budi Handoko\",\n                    \"Kim Jong Un\",\n                    \"Tony Stark\",\n                    \"Tony Hawk\",\n                    \"Dani Aditya\",\n                    \"Oda Nobunaga\",\n                    \"Itachi Uchiha\",\n                ]\n                random_nasabah = random.choice(nasabah_list)\n                nasabah.send_keys(random_nasabah)\n                time.sleep(7)\n                capture_screenshot(driver, request, \"08_filled_nasabah_name\", attempt + 1)\n    \n                # Input Nomor Rekening\n                norek = driver.find_element(\n                    By.XPATH, \"//*[@data-testid='field-bank-number']\"\n                )\n                norek.click()\n                random_number = random.randint(10000, 99999)\n                norek.send_keys(random_number)\n                time.sleep(5)\n>               capture_screenshot(driver, request, \"09_filled_norek\", attempt + 1)\n\ntest_regression.py:151: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_regression.py:47: in capture_screenshot\n    driver.save_screenshot(screenshot_path)\n..\\..\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:984: in save_screenshot\n    return self.get_screenshot_as_file(filename)\n..\\..\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:959: in get_screenshot_as_file\n    png = self.get_screenshot_as_png()\n..\\..\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:993: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n..\\..\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1003: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n..\\..\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000025BC33F47C0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...dInitThunk [0x75987BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7761C0CB+107]\\\\n\\\\tRtlClearBits [0x7761C04F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=132.0.6834.160)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00A274A3+25091]\nE       \t(No symbol) [0x009ADC04]\nE       \t(No symbol) [0x0088B373]\nE       \t(No symbol) [0x0086CEDB]\nE       \t(No symbol) [0x008F7FAF]\nE       \t(No symbol) [0x0090ADC9]\nE       \t(No symbol) [0x008F1CA6]\nE       \t(No symbol) [0x008C31D5]\nE       \t(No symbol) [0x008C435D]\nE       \tGetHandleVerifier [0x00D207C3+3142947]\nE       \tGetHandleVerifier [0x00D31A2B+3213195]\nE       \tGetHandleVerifier [0x00D2C412+3191154]\nE       \tGetHandleVerifier [0x00AC8720+685184]\nE       \t(No symbol) [0x009B6E1D]\nE       \t(No symbol) [0x009B3E18]\nE       \t(No symbol) [0x009B3FB6]\nE       \t(No symbol) [0x009A66F0]\nE       \tBaseThreadInitThunk [0x75987BA9+25]\nE       \tRtlInitializeExceptionChain [0x7761C0CB+107]\nE       \tRtlClearBits [0x7761C04F+191]\n\n..\\..\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchWindowException\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"db26184910788f6c2ba9c9428291011d\")>, request = <FixtureRequest for <Function test_tambah_bank>>\n\n    @pytest.mark.order(1)\n    def test_tambah_bank(driver, request):\n        for attempt in range(1):\n            try:\n                print(f\"Iteration {attempt + 1} started\")\n    \n                driver.get(\"https://sit.siprusedu.com/login\")\n                capture_screenshot(driver, request, \"01_login_page\", attempt + 1)\n    \n                wait = WebDriverWait(driver, 10)\n    \n                # Login\n                email = wait.until(\n                    EC.presence_of_element_located((By.XPATH, \"//input[@name='email']\"))\n                )\n                password = driver.find_element(By.NAME, \"password\")\n                login_button = driver.find_element(\n                    By.XPATH, \"//*[@id='__next']/div[1]/main/div[1]/div/form/button\"\n                )\n    \n                email.send_keys(\"admin.sekolah@gmail.com\")\n                password.send_keys(\"Test1234\")\n                capture_screenshot(driver, request, \"02_filled_login_form\", attempt + 1)\n                login_button.click()\n                time.sleep(9)\n                capture_screenshot(driver, request, \"03_after_login\", attempt + 1)\n    \n                # Navigasi ke Master Data\n                master_data = wait.until(\n                    EC.element_to_be_clickable(\n                        (By.XPATH, \"(//*[@data-testid='sidebar-menu-master-data'])[2]\")\n                    )\n                )\n                master_data.click()\n                time.sleep(6)\n                capture_screenshot(driver, request, \"04_master_data_page\", attempt + 1)\n    \n                # Navigasi ke Akun Bank\n                akun_bank = driver.find_element(\n                    By.XPATH, \"(//*[@data-testid='sidebar-menu-akun-bank'])[2]\"\n                )\n                akun_bank.click()\n                time.sleep(6)\n                capture_screenshot(driver, request, \"05_akun_bank_page\", attempt + 1)\n    \n                # Klik Tambah Akun Bank\n                btn_tambah = driver.find_element(\n                    By.XPATH, \"//*[@data-testid='btn-add-bank']\"\n                )\n                btn_tambah.click()\n                time.sleep(6)\n                capture_screenshot(driver, request, \"06_tambah_akun_bank_page\", attempt + 1)\n    \n                # Pilih Nama Bank\n                dropdown_bank = driver.find_element(\n                    By.XPATH, \"//*[@data-testid='selected-value']\"\n                )\n                dropdown_bank.click()\n                value_bank = driver.find_element(\n                    By.XPATH,\n                    \"//*[@data-testid='option-PT. BANK CIMB NIAGA UNIT USAHA SYARIAH - (CIMB SYARIAH)']\",\n                )\n                value_bank.click()\n                time.sleep(3)\n                capture_screenshot(driver, request, \"07_selected_bank\", attempt + 1)\n    \n                # Input Nama Rekening\n                nasabah = driver.find_element(\n                    By.XPATH, \"//*[@data-testid='field-bank-name']\"\n                )\n                nasabah.click()\n                nasabah_list = [\n                    \"Toni\",\n                    \"Jono\",\n                    \"Budi Handoko\",\n                    \"Kim Jong Un\",\n                    \"Tony Stark\",\n                    \"Tony Hawk\",\n                    \"Dani Aditya\",\n                    \"Oda Nobunaga\",\n                    \"Itachi Uchiha\",\n                ]\n                random_nasabah = random.choice(nasabah_list)\n                nasabah.send_keys(random_nasabah)\n                time.sleep(7)\n                capture_screenshot(driver, request, \"08_filled_nasabah_name\", attempt + 1)\n    \n                # Input Nomor Rekening\n                norek = driver.find_element(\n                    By.XPATH, \"//*[@data-testid='field-bank-number']\"\n                )\n                norek.click()\n                random_number = random.randint(10000, 99999)\n                norek.send_keys(random_number)\n                time.sleep(5)\n                capture_screenshot(driver, request, \"09_filled_norek\", attempt + 1)\n    \n                # Pilih Kepemilikan\n                kepemilikan = driver.find_element(\n                    By.XPATH, \"(//*[@data-testid='selected-value'])[2]\"\n                )\n                kepemilikan.click()\n                value_kepemilikan = driver.find_element(\n                    By.XPATH, \"(//*[@data-testid='paragraph'])[1]\"\n                )\n                value_kepemilikan.click()\n                capture_screenshot(driver, request, \"10_selected_kepemilikan\", attempt + 1)\n    \n                # Klik Tambahkan\n                button_tambahData = driver.find_element(\n                    By.XPATH,\n                    \"//button[contains(@class, 'rounded-[6px]') and .//div[text()='Tambahkan']]\",\n                )\n                button_tambahData.click()\n                time.sleep(6)\n                capture_screenshot(driver, request, \"11_submission_completed\", attempt + 1)\n    \n                print(f\"Iteration {attempt + 1} completed\")\n    \n            except Exception as e:\n                print(f\"❌ Error occurred in iteration {attempt + 1}: {e}\")\n>               capture_screenshot(\n                    driver, request, f\"error_iteration_{attempt + 1}\", attempt + 1\n                )\n\ntest_regression.py:177: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_regression.py:47: in capture_screenshot\n    driver.save_screenshot(screenshot_path)\n..\\..\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:984: in save_screenshot\n    return self.get_screenshot_as_file(filename)\n..\\..\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:959: in get_screenshot_as_file\n    png = self.get_screenshot_as_png()\n..\\..\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:993: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n..\\..\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1003: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n..\\..\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000025BC33F47C0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...dInitThunk [0x75987BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7761C0CB+107]\\\\n\\\\tRtlClearBits [0x7761C04F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=132.0.6834.160)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00A274A3+25091]\nE       \t(No symbol) [0x009ADC04]\nE       \t(No symbol) [0x0088B373]\nE       \t(No symbol) [0x0086CEDB]\nE       \t(No symbol) [0x008F7FAF]\nE       \t(No symbol) [0x0090ADC9]\nE       \t(No symbol) [0x008F1CA6]\nE       \t(No symbol) [0x008C31D5]\nE       \t(No symbol) [0x008C435D]\nE       \tGetHandleVerifier [0x00D207C3+3142947]\nE       \tGetHandleVerifier [0x00D31A2B+3213195]\nE       \tGetHandleVerifier [0x00D2C412+3191154]\nE       \tGetHandleVerifier [0x00AC8720+685184]\nE       \t(No symbol) [0x009B6E1D]\nE       \t(No symbol) [0x009B3E18]\nE       \t(No symbol) [0x009B3FB6]\nE       \t(No symbol) [0x009A66F0]\nE       \tBaseThreadInitThunk [0x75987BA9+25]\nE       \tRtlInitializeExceptionChain [0x7761C0CB+107]\nE       \tRtlClearBits [0x7761C04F+191]\n\n..\\..\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchWindowException\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"db26184910788f6c2ba9c9428291011d\")>, request = <FixtureRequest for <Function test_tambah_bank>>\n\n    @pytest.mark.order(1)\n    def test_tambah_bank(driver, request):\n        for attempt in range(1):\n            try:\n                print(f\"Iteration {attempt + 1} started\")\n    \n                driver.get(\"https://sit.siprusedu.com/login\")\n                capture_screenshot(driver, request, \"01_login_page\", attempt + 1)\n    \n                wait = WebDriverWait(driver, 10)\n    \n                # Login\n                email = wait.until(\n                    EC.presence_of_element_located((By.XPATH, \"//input[@name='email']\"))\n                )\n                password = driver.find_element(By.NAME, \"password\")\n                login_button = driver.find_element(\n                    By.XPATH, \"//*[@id='__next']/div[1]/main/div[1]/div/form/button\"\n                )\n    \n                email.send_keys(\"admin.sekolah@gmail.com\")\n                password.send_keys(\"Test1234\")\n                capture_screenshot(driver, request, \"02_filled_login_form\", attempt + 1)\n                login_button.click()\n                time.sleep(9)\n                capture_screenshot(driver, request, \"03_after_login\", attempt + 1)\n    \n                # Navigasi ke Master Data\n                master_data = wait.until(\n                    EC.element_to_be_clickable(\n                        (By.XPATH, \"(//*[@data-testid='sidebar-menu-master-data'])[2]\")\n                    )\n                )\n                master_data.click()\n                time.sleep(6)\n                capture_screenshot(driver, request, \"04_master_data_page\", attempt + 1)\n    \n                # Navigasi ke Akun Bank\n                akun_bank = driver.find_element(\n                    By.XPATH, \"(//*[@data-testid='sidebar-menu-akun-bank'])[2]\"\n                )\n                akun_bank.click()\n                time.sleep(6)\n                capture_screenshot(driver, request, \"05_akun_bank_page\", attempt + 1)\n    \n                # Klik Tambah Akun Bank\n                btn_tambah = driver.find_element(\n                    By.XPATH, \"//*[@data-testid='btn-add-bank']\"\n                )\n                btn_tambah.click()\n                time.sleep(6)\n                capture_screenshot(driver, request, \"06_tambah_akun_bank_page\", attempt + 1)\n    \n                # Pilih Nama Bank\n                dropdown_bank = driver.find_element(\n                    By.XPATH, \"//*[@data-testid='selected-value']\"\n                )\n                dropdown_bank.click()\n                value_bank = driver.find_element(\n                    By.XPATH,\n                    \"//*[@data-testid='option-PT. BANK CIMB NIAGA UNIT USAHA SYARIAH - (CIMB SYARIAH)']\",\n                )\n                value_bank.click()\n                time.sleep(3)\n                capture_screenshot(driver, request, \"07_selected_bank\", attempt + 1)\n    \n                # Input Nama Rekening\n                nasabah = driver.find_element(\n                    By.XPATH, \"//*[@data-testid='field-bank-name']\"\n                )\n                nasabah.click()\n                nasabah_list = [\n                    \"Toni\",\n                    \"Jono\",\n                    \"Budi Handoko\",\n                    \"Kim Jong Un\",\n                    \"Tony Stark\",\n                    \"Tony Hawk\",\n                    \"Dani Aditya\",\n                    \"Oda Nobunaga\",\n                    \"Itachi Uchiha\",\n                ]\n                random_nasabah = random.choice(nasabah_list)\n                nasabah.send_keys(random_nasabah)\n                time.sleep(7)\n                capture_screenshot(driver, request, \"08_filled_nasabah_name\", attempt + 1)\n    \n                # Input Nomor Rekening\n                norek = driver.find_element(\n                    By.XPATH, \"//*[@data-testid='field-bank-number']\"\n                )\n                norek.click()\n                random_number = random.randint(10000, 99999)\n                norek.send_keys(random_number)\n                time.sleep(5)\n                capture_screenshot(driver, request, \"09_filled_norek\", attempt + 1)\n    \n                # Pilih Kepemilikan\n                kepemilikan = driver.find_element(\n                    By.XPATH, \"(//*[@data-testid='selected-value'])[2]\"\n                )\n                kepemilikan.click()\n                value_kepemilikan = driver.find_element(\n                    By.XPATH, \"(//*[@data-testid='paragraph'])[1]\"\n                )\n                value_kepemilikan.click()\n                capture_screenshot(driver, request, \"10_selected_kepemilikan\", attempt + 1)\n    \n                # Klik Tambahkan\n                button_tambahData = driver.find_element(\n                    By.XPATH,\n                    \"//button[contains(@class, 'rounded-[6px]') and .//div[text()='Tambahkan']]\",\n                )\n                button_tambahData.click()\n                time.sleep(6)\n                capture_screenshot(driver, request, \"11_submission_completed\", attempt + 1)\n    \n                print(f\"Iteration {attempt + 1} completed\")\n    \n            except Exception as e:\n                print(f\"❌ Error occurred in iteration {attempt + 1}: {e}\")\n                capture_screenshot(\n                    driver, request, f\"error_iteration_{attempt + 1}\", attempt + 1\n                )\n            finally:\n                # Bersihkan state sebelum iterasi berikutnya\n>               driver.delete_all_cookies()\n\ntest_regression.py:182: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:745: in delete_all_cookies\n    self.execute(Command.DELETE_ALL_COOKIES)\n..\\..\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000025BC33F47C0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...dInitThunk [0x75987BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7761C0CB+107]\\\\n\\\\tRtlClearBits [0x7761C04F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=132.0.6834.160)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00A274A3+25091]\nE       \t(No symbol) [0x009ADC04]\nE       \t(No symbol) [0x0088B373]\nE       \t(No symbol) [0x0086CEDB]\nE       \t(No symbol) [0x008F7FAF]\nE       \t(No symbol) [0x0090ADC9]\nE       \t(No symbol) [0x008F1CA6]\nE       \t(No symbol) [0x008C31D5]\nE       \t(No symbol) [0x008C435D]\nE       \tGetHandleVerifier [0x00D207C3+3142947]\nE       \tGetHandleVerifier [0x00D31A2B+3213195]\nE       \tGetHandleVerifier [0x00D2C412+3191154]\nE       \tGetHandleVerifier [0x00AC8720+685184]\nE       \t(No symbol) [0x009B6E1D]\nE       \t(No symbol) [0x009B3E18]\nE       \t(No symbol) [0x009B3FB6]\nE       \t(No symbol) [0x009A66F0]\nE       \tBaseThreadInitThunk [0x75987BA9+25]\nE       \tRtlInitializeExceptionChain [0x7761C0CB+107]\nE       \tRtlClearBits [0x7761C04F+191]\n\n..\\..\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchWindowException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1738568671025,"stop":1738568673976,"duration":2951},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=132.0.6834.160)\nStacktrace:\n\tGetHandleVerifier [0x00A274A3+25091]\n\t(No symbol) [0x009ADC04]\n\t(No symbol) [0x0088B373]\n\t(No symbol) [0x0086CEDB]\n\t(No symbol) [0x008F7FAF]\n\t(No symbol) [0x0090ADC9]\n\t(No symbol) [0x008F1CA6]\n\t(No symbol) [0x008C31D5]\n\t(No symbol) [0x008C435D]\n\tGetHandleVerifier [0x00D207C3+3142947]\n\tGetHandleVerifier [0x00D31A2B+3213195]\n\tGetHandleVerifier [0x00D2C412+3191154]\n\tGetHandleVerifier [0x00AC8720+685184]\n\t(No symbol) [0x009B6E1D]\n\t(No symbol) [0x009B3E18]\n\t(No symbol) [0x009B3FB6]\n\t(No symbol) [0x009A66F0]\n\tBaseThreadInitThunk [0x75987BA9+25]\n\tRtlInitializeExceptionChain [0x7761C0CB+107]\n\tRtlClearBits [0x7761C04F+191]","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"db26184910788f6c2ba9c9428291011d\")>, request = <FixtureRequest for <Function test_tambah_bank>>\n\n    @pytest.mark.order(1)\n    def test_tambah_bank(driver, request):\n        for attempt in range(1):\n            try:\n                print(f\"Iteration {attempt + 1} started\")\n    \n                driver.get(\"https://sit.siprusedu.com/login\")\n                capture_screenshot(driver, request, \"01_login_page\", attempt + 1)\n    \n                wait = WebDriverWait(driver, 10)\n    \n                # Login\n                email = wait.until(\n                    EC.presence_of_element_located((By.XPATH, \"//input[@name='email']\"))\n                )\n                password = driver.find_element(By.NAME, \"password\")\n                login_button = driver.find_element(\n                    By.XPATH, \"//*[@id='__next']/div[1]/main/div[1]/div/form/button\"\n                )\n    \n                email.send_keys(\"admin.sekolah@gmail.com\")\n                password.send_keys(\"Test1234\")\n                capture_screenshot(driver, request, \"02_filled_login_form\", attempt + 1)\n                login_button.click()\n                time.sleep(9)\n                capture_screenshot(driver, request, \"03_after_login\", attempt + 1)\n    \n                # Navigasi ke Master Data\n                master_data = wait.until(\n                    EC.element_to_be_clickable(\n                        (By.XPATH, \"(//*[@data-testid='sidebar-menu-master-data'])[2]\")\n                    )\n                )\n                master_data.click()\n                time.sleep(6)\n                capture_screenshot(driver, request, \"04_master_data_page\", attempt + 1)\n    \n                # Navigasi ke Akun Bank\n                akun_bank = driver.find_element(\n                    By.XPATH, \"(//*[@data-testid='sidebar-menu-akun-bank'])[2]\"\n                )\n                akun_bank.click()\n                time.sleep(6)\n                capture_screenshot(driver, request, \"05_akun_bank_page\", attempt + 1)\n    \n                # Klik Tambah Akun Bank\n                btn_tambah = driver.find_element(\n                    By.XPATH, \"//*[@data-testid='btn-add-bank']\"\n                )\n                btn_tambah.click()\n                time.sleep(6)\n                capture_screenshot(driver, request, \"06_tambah_akun_bank_page\", attempt + 1)\n    \n                # Pilih Nama Bank\n                dropdown_bank = driver.find_element(\n                    By.XPATH, \"//*[@data-testid='selected-value']\"\n                )\n                dropdown_bank.click()\n                value_bank = driver.find_element(\n                    By.XPATH,\n                    \"//*[@data-testid='option-PT. BANK CIMB NIAGA UNIT USAHA SYARIAH - (CIMB SYARIAH)']\",\n                )\n                value_bank.click()\n                time.sleep(3)\n                capture_screenshot(driver, request, \"07_selected_bank\", attempt + 1)\n    \n                # Input Nama Rekening\n                nasabah = driver.find_element(\n                    By.XPATH, \"//*[@data-testid='field-bank-name']\"\n                )\n                nasabah.click()\n                nasabah_list = [\n                    \"Toni\",\n                    \"Jono\",\n                    \"Budi Handoko\",\n                    \"Kim Jong Un\",\n                    \"Tony Stark\",\n                    \"Tony Hawk\",\n                    \"Dani Aditya\",\n                    \"Oda Nobunaga\",\n                    \"Itachi Uchiha\",\n                ]\n                random_nasabah = random.choice(nasabah_list)\n                nasabah.send_keys(random_nasabah)\n                time.sleep(7)\n                capture_screenshot(driver, request, \"08_filled_nasabah_name\", attempt + 1)\n    \n                # Input Nomor Rekening\n                norek = driver.find_element(\n                    By.XPATH, \"//*[@data-testid='field-bank-number']\"\n                )\n                norek.click()\n                random_number = random.randint(10000, 99999)\n                norek.send_keys(random_number)\n                time.sleep(5)\n>               capture_screenshot(driver, request, \"09_filled_norek\", attempt + 1)\n\ntest_regression.py:151: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_regression.py:47: in capture_screenshot\n    driver.save_screenshot(screenshot_path)\n..\\..\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:984: in save_screenshot\n    return self.get_screenshot_as_file(filename)\n..\\..\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:959: in get_screenshot_as_file\n    png = self.get_screenshot_as_png()\n..\\..\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:993: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n..\\..\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1003: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n..\\..\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000025BC33F47C0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...dInitThunk [0x75987BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7761C0CB+107]\\\\n\\\\tRtlClearBits [0x7761C04F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=132.0.6834.160)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00A274A3+25091]\nE       \t(No symbol) [0x009ADC04]\nE       \t(No symbol) [0x0088B373]\nE       \t(No symbol) [0x0086CEDB]\nE       \t(No symbol) [0x008F7FAF]\nE       \t(No symbol) [0x0090ADC9]\nE       \t(No symbol) [0x008F1CA6]\nE       \t(No symbol) [0x008C31D5]\nE       \t(No symbol) [0x008C435D]\nE       \tGetHandleVerifier [0x00D207C3+3142947]\nE       \tGetHandleVerifier [0x00D31A2B+3213195]\nE       \tGetHandleVerifier [0x00D2C412+3191154]\nE       \tGetHandleVerifier [0x00AC8720+685184]\nE       \t(No symbol) [0x009B6E1D]\nE       \t(No symbol) [0x009B3E18]\nE       \t(No symbol) [0x009B3FB6]\nE       \t(No symbol) [0x009A66F0]\nE       \tBaseThreadInitThunk [0x75987BA9+25]\nE       \tRtlInitializeExceptionChain [0x7761C0CB+107]\nE       \tRtlClearBits [0x7761C04F+191]\n\n..\\..\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchWindowException\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"db26184910788f6c2ba9c9428291011d\")>, request = <FixtureRequest for <Function test_tambah_bank>>\n\n    @pytest.mark.order(1)\n    def test_tambah_bank(driver, request):\n        for attempt in range(1):\n            try:\n                print(f\"Iteration {attempt + 1} started\")\n    \n                driver.get(\"https://sit.siprusedu.com/login\")\n                capture_screenshot(driver, request, \"01_login_page\", attempt + 1)\n    \n                wait = WebDriverWait(driver, 10)\n    \n                # Login\n                email = wait.until(\n                    EC.presence_of_element_located((By.XPATH, \"//input[@name='email']\"))\n                )\n                password = driver.find_element(By.NAME, \"password\")\n                login_button = driver.find_element(\n                    By.XPATH, \"//*[@id='__next']/div[1]/main/div[1]/div/form/button\"\n                )\n    \n                email.send_keys(\"admin.sekolah@gmail.com\")\n                password.send_keys(\"Test1234\")\n                capture_screenshot(driver, request, \"02_filled_login_form\", attempt + 1)\n                login_button.click()\n                time.sleep(9)\n                capture_screenshot(driver, request, \"03_after_login\", attempt + 1)\n    \n                # Navigasi ke Master Data\n                master_data = wait.until(\n                    EC.element_to_be_clickable(\n                        (By.XPATH, \"(//*[@data-testid='sidebar-menu-master-data'])[2]\")\n                    )\n                )\n                master_data.click()\n                time.sleep(6)\n                capture_screenshot(driver, request, \"04_master_data_page\", attempt + 1)\n    \n                # Navigasi ke Akun Bank\n                akun_bank = driver.find_element(\n                    By.XPATH, \"(//*[@data-testid='sidebar-menu-akun-bank'])[2]\"\n                )\n                akun_bank.click()\n                time.sleep(6)\n                capture_screenshot(driver, request, \"05_akun_bank_page\", attempt + 1)\n    \n                # Klik Tambah Akun Bank\n                btn_tambah = driver.find_element(\n                    By.XPATH, \"//*[@data-testid='btn-add-bank']\"\n                )\n                btn_tambah.click()\n                time.sleep(6)\n                capture_screenshot(driver, request, \"06_tambah_akun_bank_page\", attempt + 1)\n    \n                # Pilih Nama Bank\n                dropdown_bank = driver.find_element(\n                    By.XPATH, \"//*[@data-testid='selected-value']\"\n                )\n                dropdown_bank.click()\n                value_bank = driver.find_element(\n                    By.XPATH,\n                    \"//*[@data-testid='option-PT. BANK CIMB NIAGA UNIT USAHA SYARIAH - (CIMB SYARIAH)']\",\n                )\n                value_bank.click()\n                time.sleep(3)\n                capture_screenshot(driver, request, \"07_selected_bank\", attempt + 1)\n    \n                # Input Nama Rekening\n                nasabah = driver.find_element(\n                    By.XPATH, \"//*[@data-testid='field-bank-name']\"\n                )\n                nasabah.click()\n                nasabah_list = [\n                    \"Toni\",\n                    \"Jono\",\n                    \"Budi Handoko\",\n                    \"Kim Jong Un\",\n                    \"Tony Stark\",\n                    \"Tony Hawk\",\n                    \"Dani Aditya\",\n                    \"Oda Nobunaga\",\n                    \"Itachi Uchiha\",\n                ]\n                random_nasabah = random.choice(nasabah_list)\n                nasabah.send_keys(random_nasabah)\n                time.sleep(7)\n                capture_screenshot(driver, request, \"08_filled_nasabah_name\", attempt + 1)\n    \n                # Input Nomor Rekening\n                norek = driver.find_element(\n                    By.XPATH, \"//*[@data-testid='field-bank-number']\"\n                )\n                norek.click()\n                random_number = random.randint(10000, 99999)\n                norek.send_keys(random_number)\n                time.sleep(5)\n                capture_screenshot(driver, request, \"09_filled_norek\", attempt + 1)\n    \n                # Pilih Kepemilikan\n                kepemilikan = driver.find_element(\n                    By.XPATH, \"(//*[@data-testid='selected-value'])[2]\"\n                )\n                kepemilikan.click()\n                value_kepemilikan = driver.find_element(\n                    By.XPATH, \"(//*[@data-testid='paragraph'])[1]\"\n                )\n                value_kepemilikan.click()\n                capture_screenshot(driver, request, \"10_selected_kepemilikan\", attempt + 1)\n    \n                # Klik Tambahkan\n                button_tambahData = driver.find_element(\n                    By.XPATH,\n                    \"//button[contains(@class, 'rounded-[6px]') and .//div[text()='Tambahkan']]\",\n                )\n                button_tambahData.click()\n                time.sleep(6)\n                capture_screenshot(driver, request, \"11_submission_completed\", attempt + 1)\n    \n                print(f\"Iteration {attempt + 1} completed\")\n    \n            except Exception as e:\n                print(f\"❌ Error occurred in iteration {attempt + 1}: {e}\")\n>               capture_screenshot(\n                    driver, request, f\"error_iteration_{attempt + 1}\", attempt + 1\n                )\n\ntest_regression.py:177: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_regression.py:47: in capture_screenshot\n    driver.save_screenshot(screenshot_path)\n..\\..\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:984: in save_screenshot\n    return self.get_screenshot_as_file(filename)\n..\\..\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:959: in get_screenshot_as_file\n    png = self.get_screenshot_as_png()\n..\\..\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:993: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n..\\..\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1003: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n..\\..\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000025BC33F47C0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...dInitThunk [0x75987BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7761C0CB+107]\\\\n\\\\tRtlClearBits [0x7761C04F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=132.0.6834.160)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00A274A3+25091]\nE       \t(No symbol) [0x009ADC04]\nE       \t(No symbol) [0x0088B373]\nE       \t(No symbol) [0x0086CEDB]\nE       \t(No symbol) [0x008F7FAF]\nE       \t(No symbol) [0x0090ADC9]\nE       \t(No symbol) [0x008F1CA6]\nE       \t(No symbol) [0x008C31D5]\nE       \t(No symbol) [0x008C435D]\nE       \tGetHandleVerifier [0x00D207C3+3142947]\nE       \tGetHandleVerifier [0x00D31A2B+3213195]\nE       \tGetHandleVerifier [0x00D2C412+3191154]\nE       \tGetHandleVerifier [0x00AC8720+685184]\nE       \t(No symbol) [0x009B6E1D]\nE       \t(No symbol) [0x009B3E18]\nE       \t(No symbol) [0x009B3FB6]\nE       \t(No symbol) [0x009A66F0]\nE       \tBaseThreadInitThunk [0x75987BA9+25]\nE       \tRtlInitializeExceptionChain [0x7761C0CB+107]\nE       \tRtlClearBits [0x7761C04F+191]\n\n..\\..\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchWindowException\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"db26184910788f6c2ba9c9428291011d\")>, request = <FixtureRequest for <Function test_tambah_bank>>\n\n    @pytest.mark.order(1)\n    def test_tambah_bank(driver, request):\n        for attempt in range(1):\n            try:\n                print(f\"Iteration {attempt + 1} started\")\n    \n                driver.get(\"https://sit.siprusedu.com/login\")\n                capture_screenshot(driver, request, \"01_login_page\", attempt + 1)\n    \n                wait = WebDriverWait(driver, 10)\n    \n                # Login\n                email = wait.until(\n                    EC.presence_of_element_located((By.XPATH, \"//input[@name='email']\"))\n                )\n                password = driver.find_element(By.NAME, \"password\")\n                login_button = driver.find_element(\n                    By.XPATH, \"//*[@id='__next']/div[1]/main/div[1]/div/form/button\"\n                )\n    \n                email.send_keys(\"admin.sekolah@gmail.com\")\n                password.send_keys(\"Test1234\")\n                capture_screenshot(driver, request, \"02_filled_login_form\", attempt + 1)\n                login_button.click()\n                time.sleep(9)\n                capture_screenshot(driver, request, \"03_after_login\", attempt + 1)\n    \n                # Navigasi ke Master Data\n                master_data = wait.until(\n                    EC.element_to_be_clickable(\n                        (By.XPATH, \"(//*[@data-testid='sidebar-menu-master-data'])[2]\")\n                    )\n                )\n                master_data.click()\n                time.sleep(6)\n                capture_screenshot(driver, request, \"04_master_data_page\", attempt + 1)\n    \n                # Navigasi ke Akun Bank\n                akun_bank = driver.find_element(\n                    By.XPATH, \"(//*[@data-testid='sidebar-menu-akun-bank'])[2]\"\n                )\n                akun_bank.click()\n                time.sleep(6)\n                capture_screenshot(driver, request, \"05_akun_bank_page\", attempt + 1)\n    \n                # Klik Tambah Akun Bank\n                btn_tambah = driver.find_element(\n                    By.XPATH, \"//*[@data-testid='btn-add-bank']\"\n                )\n                btn_tambah.click()\n                time.sleep(6)\n                capture_screenshot(driver, request, \"06_tambah_akun_bank_page\", attempt + 1)\n    \n                # Pilih Nama Bank\n                dropdown_bank = driver.find_element(\n                    By.XPATH, \"//*[@data-testid='selected-value']\"\n                )\n                dropdown_bank.click()\n                value_bank = driver.find_element(\n                    By.XPATH,\n                    \"//*[@data-testid='option-PT. BANK CIMB NIAGA UNIT USAHA SYARIAH - (CIMB SYARIAH)']\",\n                )\n                value_bank.click()\n                time.sleep(3)\n                capture_screenshot(driver, request, \"07_selected_bank\", attempt + 1)\n    \n                # Input Nama Rekening\n                nasabah = driver.find_element(\n                    By.XPATH, \"//*[@data-testid='field-bank-name']\"\n                )\n                nasabah.click()\n                nasabah_list = [\n                    \"Toni\",\n                    \"Jono\",\n                    \"Budi Handoko\",\n                    \"Kim Jong Un\",\n                    \"Tony Stark\",\n                    \"Tony Hawk\",\n                    \"Dani Aditya\",\n                    \"Oda Nobunaga\",\n                    \"Itachi Uchiha\",\n                ]\n                random_nasabah = random.choice(nasabah_list)\n                nasabah.send_keys(random_nasabah)\n                time.sleep(7)\n                capture_screenshot(driver, request, \"08_filled_nasabah_name\", attempt + 1)\n    \n                # Input Nomor Rekening\n                norek = driver.find_element(\n                    By.XPATH, \"//*[@data-testid='field-bank-number']\"\n                )\n                norek.click()\n                random_number = random.randint(10000, 99999)\n                norek.send_keys(random_number)\n                time.sleep(5)\n                capture_screenshot(driver, request, \"09_filled_norek\", attempt + 1)\n    \n                # Pilih Kepemilikan\n                kepemilikan = driver.find_element(\n                    By.XPATH, \"(//*[@data-testid='selected-value'])[2]\"\n                )\n                kepemilikan.click()\n                value_kepemilikan = driver.find_element(\n                    By.XPATH, \"(//*[@data-testid='paragraph'])[1]\"\n                )\n                value_kepemilikan.click()\n                capture_screenshot(driver, request, \"10_selected_kepemilikan\", attempt + 1)\n    \n                # Klik Tambahkan\n                button_tambahData = driver.find_element(\n                    By.XPATH,\n                    \"//button[contains(@class, 'rounded-[6px]') and .//div[text()='Tambahkan']]\",\n                )\n                button_tambahData.click()\n                time.sleep(6)\n                capture_screenshot(driver, request, \"11_submission_completed\", attempt + 1)\n    \n                print(f\"Iteration {attempt + 1} completed\")\n    \n            except Exception as e:\n                print(f\"❌ Error occurred in iteration {attempt + 1}: {e}\")\n                capture_screenshot(\n                    driver, request, f\"error_iteration_{attempt + 1}\", attempt + 1\n                )\n            finally:\n                # Bersihkan state sebelum iterasi berikutnya\n>               driver.delete_all_cookies()\n\ntest_regression.py:182: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:745: in delete_all_cookies\n    self.execute(Command.DELETE_ALL_COOKIES)\n..\\..\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000025BC33F47C0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...dInitThunk [0x75987BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7761C0CB+107]\\\\n\\\\tRtlClearBits [0x7761C04F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=132.0.6834.160)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00A274A3+25091]\nE       \t(No symbol) [0x009ADC04]\nE       \t(No symbol) [0x0088B373]\nE       \t(No symbol) [0x0086CEDB]\nE       \t(No symbol) [0x008F7FAF]\nE       \t(No symbol) [0x0090ADC9]\nE       \t(No symbol) [0x008F1CA6]\nE       \t(No symbol) [0x008C31D5]\nE       \t(No symbol) [0x008C435D]\nE       \tGetHandleVerifier [0x00D207C3+3142947]\nE       \tGetHandleVerifier [0x00D31A2B+3213195]\nE       \tGetHandleVerifier [0x00D2C412+3191154]\nE       \tGetHandleVerifier [0x00AC8720+685184]\nE       \t(No symbol) [0x009B6E1D]\nE       \t(No symbol) [0x009B3E18]\nE       \t(No symbol) [0x009B3FB6]\nE       \t(No symbol) [0x009A66F0]\nE       \tBaseThreadInitThunk [0x75987BA9+25]\nE       \tRtlInitializeExceptionChain [0x7761C0CB+107]\nE       \tRtlClearBits [0x7761C04F+191]\n\n..\\..\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchWindowException","steps":[],"attachments":[{"uid":"9f0bcfc3602c6f7d","name":"01_login_page (Attempt 1)","source":"9f0bcfc3602c6f7d.png","type":"image/png","size":13769},{"uid":"6125f6833aba53fe","name":"02_filled_login_form (Attempt 1)","source":"6125f6833aba53fe.png","type":"image/png","size":723198},{"uid":"42a9a40f1f202528","name":"03_after_login (Attempt 1)","source":"42a9a40f1f202528.png","type":"image/png","size":170763},{"uid":"d1ec786852351e5d","name":"04_master_data_page (Attempt 1)","source":"d1ec786852351e5d.png","type":"image/png","size":173380},{"uid":"851ea47a334b8adf","name":"05_akun_bank_page (Attempt 1)","source":"851ea47a334b8adf.png","type":"image/png","size":78809},{"uid":"dc6a3b62894a56c5","name":"06_tambah_akun_bank_page (Attempt 1)","source":"dc6a3b62894a56c5.png","type":"image/png","size":86322},{"uid":"ad90d7fc8027b7be","name":"07_selected_bank (Attempt 1)","source":"ad90d7fc8027b7be.png","type":"image/png","size":91394},{"uid":"7adc9c18b89b4d83","name":"08_filled_nasabah_name (Attempt 1)","source":"7adc9c18b89b4d83.png","type":"image/png","size":89669}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentStep":false,"attachmentsCount":8,"shouldDisplayMessage":true},"afterStages":[{"name":"driver::0","time":{"start":1738568719537,"stop":1738568721621,"duration":2084},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"tag","value":"order(1)"},{"name":"parentSuite","value":"TrySeleniumTestCase.NewRegression"},{"name":"suite","value":"test_regression"},{"name":"host","value":"LAPTOP-9CBQRM3S"},{"name":"thread","value":"13600-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"TrySeleniumTestCase.NewRegression.test_regression"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["order(1)"]},"source":"e6e6a81ea155d63c.json","parameterValues":[]}